// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3719.driveTrain2020.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;

import org.usfirst.frc3719.driveTrain2020.Robot;
import edu.wpi.first.wpilibj.GenericHID.Hand;

/**
 *
 */
public class DriveTrain extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    int sampleSize=50;
    double[] joystickx = new double[sampleSize];
    double[] joysticky = new double[sampleSize];
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveTrain() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        addRequirements(Robot.drivetrainSub);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    public void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    public void execute() {
        Robot.drivetrainSub.SetDrive(Robot.oi.xboxController.getY(Hand.kRight),Robot.oi.xboxController.getX(Hand.kLeft));
    }
    protected double[] push (double[] CurArray, double newValue){
        double [] temp = new double[CurArray.length];
        for(int i=1; i < CurArray.length; i++)
            temp[i-1] = CurArray[i];
            temp[49] = newValue;
            return temp;
        }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    public boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    public void end(boolean interrupted) {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    
    public double average(double[] x) {  
        double sum = 0;
    
        for(int i=0; i < x.length; i++) 
            sum = sum + x[i]; 

        return sum / x.length;
    }
}
